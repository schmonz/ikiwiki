This tutorial will walk you through setting up a wiki with ikiwiki,
doing everything by hand. [[Setup]] has an easier method, but with less
control.

[[!toc ]]

## Decide where your wiki's files will go.

As a wiki compiler, ikiwiki builds a wiki from files in a source directory,
and outputs the files to a destination directory.  If you keep your wiki in
a version control system, the source directory will contain a working copy
checked out from the version control system.

For the purposes of this tutorial, we'll set shell variables
for these locations, and use those variables in the commands that follow.

	SRCDIR=~/wikiwc
	DESTDIR=~/public_html/wiki/

Note that ikiwiki owns the working copy directory; do not perform your own
edits in ikiwiki's working copy.

## Create the beginnings of your wiki.

This will create a simple main page for the wiki.

	mkdir $SRCDIR
	cd $SRCDIR
	$EDITOR index.mdwn

In the editor, you could start by entering a simple page like
[[!toggle id=page text="this one"]].
[[!toggleable id=page text="""
	Welcome to your new wiki.

	All wikis are supposed to have a \[[SandBox]],
	so this one does too.

   	----

	This wiki is powered by [ikiwiki](http://ikiwiki.info).
"""]]
   
See [[ikiwiki/formatting]] for details about the markup language.

Note that several [[standard_wiki_pages|basewiki]] will be added to your
wiki, from files in `/usr/share/ikiwiki/basewiki/`, so your wiki will
automatically get a [[SandBox]], and some other useful pages.

## Build your wiki for the first time.

	ikiwiki --verbose $SRCDIR $DESTDIR --url=http://example.org/~you/wiki/

Replace the url with the real url to your wiki. You should now
be able to visit the url and see your wiki.

## Add content to your wiki.

Continue editing or adding pages and rebuilding the wiki.
   
To quickly get started on a common task like blogging with ikiwiki, you
can copy in files from the [[examples]]. The examples are located in
`doc/examples/` in the ikiwiki source package.

You can experiment with other ikiwiki parameters such as `--wikiname`
and `--rebuild` too. Get comfortable with its command line (see
[[usage]]).

## Add a setup file.

By now you should be getting tired of typing in all the command line
options each time you change something in your wiki's setup. Time to
introduce setup files.

To generate a setup file, use `ikiwiki --dumpsetup`. You can pass
all the options have you been including at the command line, and they
will be stored in the setup file.

	ikiwiki $SRCDIR $DESTDIR --url=http://example.org/~you/wiki/ --dumpsetup ikiwiki.setup

Note that this file should *not* be put in your wiki's directory with
the rest of the files. A good place to put it is in a ~/.ikiwiki/
subdirectory.
   
Most of the options, like `wikiname` in the setup file are the same as
ikiwiki's command line options (documented in [[usage]]). `srcdir` and
`destdir` are the two directories you specify when running ikiwiki by
hand. Make sure that these are pointing to the right directories, and
read through and configure the rest of the file to your liking.

When you're satisfied, run `ikiwiki --setup ikiwiki.setup`, and it
will set everything up.

## Turn on additional features.

[[!template id="note" text="""
CGI configuration is heavily dependent on webserver. Figure out (or
configure) the location and/or filename extension your webserver
needs to execute a CGI, then set `cgi_wrapper` to a suitable path.
"""]]

Now you have a basic wiki with a setup file. Time to experiment
with ikiwiki's many features. 

Let's first enable a key wiki feature and set up [[CGI]] to allow
editing the wiki from the web. Just edit ikiwiki.setup, uncomment the
settings for the `cgi_wrapper`, make sure the filename for the cgi wrapper
is ok, run `ikiwiki --setup ikiwiki.setup`, and you're done!

There are lots of other configuration options in ikiwiki.setup that you
can uncomment, configure, and enable by re-running
`ikiwiki --setup ikiwiki.setup`. Be sure to browse through all the
[[plugins]].

## Put your wiki in revision control.

At this point you might want to check your wiki in to a revision control
system so you can keep track of changes and revert edits. Depending
on the revision control system you choose, the way this is done varies.

Note that the .ikiwiki subdirectory is where ikiwiki keeps its state, and
should be preserved, but not checked into revision control.

The [[ikiwiki-makerepo]] command automates setting up a wiki in
revision control.

[[!toggle id=subversion text="Subversion"]]
[[!toggleable id=subversion text="""
	REPOSITORY=~/wikirepo
	ikiwiki-makerepo svn $SRCDIR $REPOSITORY
"""]]

[[!toggle id=cvs text="CVS"]]
[[!toggleable id=cvs text="""
	REPOSITORY=~/wikirepo
	ikiwiki-makerepo cvs $SRCDIR $REPOSITORY
"""]]

[[!toggle id=git text="Git"]]
[[!toggleable id=git text="""
	REPOSITORY=~/wiki.git
	ikiwiki-makerepo git $SRCDIR $REPOSITORY

Please see [[rcs/git]] for detailed documentation about how
ikiwiki uses git repositories, and some important caveats
about using the git repositories.
"""]]

[[!toggle id=mercurial text="Mercurial"]]
[[!toggleable id=mercurial text="""
	REPOSITORY=$SRCDIR
	ikiwiki-makerepo mercurial $SRCDIR
"""]]

[[!toggle id=bazaar text="Bazaar"]]
[[!toggleable id=bazaar text="""
	REPOSITORY=$SRCDIR
	ikiwiki-makerepo bzr $SRCDIR
"""]]

[[!toggle id=tla text="TLA"]]
[[!toggleable id=tla text="""
	REPOSITORY=~/wikirepo
	tla make-archive me@localhost--wiki $REPOSITORY
	tla my-id "<me@localhost>"
	cd $SRCDIR
	tla archive-setup me@localhost--wiki/wiki--0
	tla init-tree me@localhost--wiki/wiki--0
	# Edit {arch}/=tagging-method and change the precious
	# line to add the .ikiwiki directory to the regexp.
	tla add *
	tla import
"""]]

[[!toggle id=monotone text="Monotone"]]
[[!toggleable id=monotone text="""
	# This assumes that you have already used "mtn genkey you@hostname".
	REPOSITORY=~/wiki.monotone
	ikiwiki-makerepo monotone $SRCDIR $REPOSITORY
"""]]

## Configure ikiwiki to use revision control.

Once your wiki is checked in to the revision control system, you should
configure ikiwiki to use revision control. Edit your ikiwiki.setup, set
`rcs` to the revision control system you chose to use.  Be careful, 
you may need to use the 'fullname'.  For example, 'hg' doesn't work, you
should use mercurial.  Be sure to set `svnrepo` to the directory for your
repository, if using subversion. Uncomment the configuration for the wrapper
for your revision control system, and configure the wrapper path appropriately 
(for Git, it should be the path to `hooks/post-update` inside the bare git repository).

Once it's all set up, run `ikiwiki --setup ikiwiki.setup` once more.
Now you should be able to edit files in $SRCDIR, and use your revision
control system to commit them, and the wiki will automatically update.
And in the web interface, RecentChanges should work, and files changed
by web users will also be committed using revision control.

## Enjoy your new wiki!

Add yourself to [[IkiWikiUsers]]. And check out
the [[tips]] to find out how to get more out of ikiwiki.
